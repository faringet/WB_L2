package main

/*
	Реализовать паттерн «строитель».
Объяснить применимость паттерна, его плюсы и минусы, а также реальные примеры использования данного примера на практике.
	https://en.wikipedia.org/wiki/Builder_pattern
*/

/*
Порождающий паттерн проектирования.
Паттерн позволяет создавать сложные объекты используя "шаги". На каждом "шаге" производится какая-то часть общего объекта.
Тем самым, выполняя все "шаги" по очереди мы формируем некий объект, который из себя представляет сложную структуру.

Строитель дает возможность использовать один и тот же код строительства объекта для получения различных представлений
этого объекта. То есть мы можем скипнуть некоторые шаги, либо добавить еще "шаг".
Для каждого строителя применяется общий интерфейс постройки.

+ позволяет создавать общий продукт пошагово
+ позволяет использовать один и тот же код для различных объектов
+ изолирует сложный код сборки объекта от его основной бизнес логики

- усложняет код программы из-за ведения всяких структур, интерфейсов итп.
- клиент будет привязан к конкретному объекта строителя так как в интерфейсе может не быть какого-то метода. То есть клиент
всегда будет создавать объект при помощи строителя.

В качестве примера будет фабрика по производству компьютеров разных брендов. Разберу кейс, когда фабрика производит сначала
один бренд. Потом меняет бренд на другой (не изменя при этом логики производства). У каждого бренда будет своя конфигурация.

*/

func main() {
	asusCollector := GetCollector("asus")
	hpCollector := GetCollector("hp")

	factory := NewFactory(asusCollector)
	asusComputer := factory.CreateComputer()
	asusComputer.Print()

	factory.SetCollector(hpCollector)
	hpComputer := factory.CreateComputer()
	hpComputer.Print()
}
