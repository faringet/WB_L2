package main

/*
	Реализовать паттерн «команда».
Объяснить применимость паттерна, его плюсы и минусы, а также реальные примеры использования данного примера на практике.
	https://en.wikipedia.org/wiki/Command_pattern
*/

/*
Поведенческий паттерн проектирования.
Позволяет добавлять поведение в структуру без ее изменения.

Какие проблемы он решает ?
Рассмотрим на примере домашнего телевизора. TV мы можем включить как с пульта, так и на самом устройстве(телеке).
Нужно реализовать "включение". Когда на нашу команду "включения" будет вызываться execute, она(команда) будет вызывать
функцию TV.on. Телевизор является получателем команды. Телевизору вообще без разницы откуда пришло TV.on. С пульта
или с кнопки на корпусе. А по факту мы будем иметь два вызывающих объекта - тот самый пульт и кнопка (на корпусе).
Оба этих объекта и будут содержать объект команды "включение".

Как решим ?
Очевидно, с помощью паттерна команда!


+ убирает прямую зависимость между объектами, вызывающими операции, и объектами, которые их непосредственно выполняют
+ позволяет реализовать простую отмену и повтор операций
+ позволяет реализовать отложенный запуск операций
+ позволяет собирать сложные команды из простых
+ реализует принцип открытости/закрытости

- усложняет код из-за введения множества дополнительных классов

*/

func main() {
	tv := &Tv{}

	onCommand := &OnCommand{tv}
	ofCommand := &OffCommand{tv}

	onButton := &Button{onCommand}
	ofButton := &Button{ofCommand}

	onButton.press()
	ofButton.press()
}
