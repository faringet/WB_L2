package main

/*
	Реализовать паттерн «стратегия».
Объяснить применимость паттерна, его плюсы и минусы, а также реальные примеры использования данного примера на практике.
	https://en.wikipedia.org/wiki/Strategy_pattern
*/

/*
Поведенческий паттерн проектирования.
Определяет схожие алгоритмы и помещает каждый из них в свою отдельную структуру. После этого алгоритмы могут взаимодействовать
в исполняемой программе.
Какие проблемы решает ?
Мы решили написать приложение навигатор для построения маршрутов. Изначально заложен функционал пешего маршрута, но нужно
также строить маршруты и на общ транспорте, для вело транспорта, для машин итд.
Главное - предложить пользователю выбор какой маршрут построить.
Решение.
Определить похожие алгоритмы, которые часто изменяются или расширяются и вынести их в собственный объект - стратегия.

+ замена алгоритмов на лету (переопределяем алгоритм - и объект будет использовать этот алгоритм)
+ изолирует код (и данные алгоритмов от бизнес логики)
+ уход от наследования
+ реализует принцип открытости/закрытости

- усложнение программы за счет дополнительных объектов
- клиент должен знать в чем различие стратегий (чтобы выбрать подходящую)
*/

var (
	start      = 10
	end        = 100
	strategies = []Strategy{&PublicTransportStrategy{}, &RoadStrategy{}, &WalkStrategy{}}
)

func main() {
	nav := Navigator{}
	for _, strategy := range strategies {
		nav.SetStrategy(strategy)
		nav.Route(start, end)

	}

}
